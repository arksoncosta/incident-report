buildscript {
    ext {
        dependencyManagementVersion = "1.0.11.RELEASE"
        springBootDependenciesVersion = "2.6.3"
        springCloudVersion = '2021.0.0'
    }
}

plugins {
    id "io.spring.dependency-management" version "${dependencyManagementVersion}"
    id 'distribution'
    id 'java'
}

apply from: 'gradle/versions.gradle'

allprojects {
    group = 'com.arkson.incidentreport'
}

subprojects {

    group = 'com.arkson.incidentreport'
    version = '0.0.1-SNAPSHOT'

    apply plugin: 'java'
    apply plugin: 'io.spring.dependency-management'

    repositories {
        jcenter()
    }

    dependencyManagement {
        imports {
            mavenBom("org.springframework.boot:spring-boot-dependencies:${springBootDependenciesVersion}")
            mavenBom "org.springframework.cloud:spring-cloud-dependencies:${springCloudVersion}"
        }
    }

    dependencies {
        implementation 'com.fasterxml.jackson.datatype:jackson-datatype-jsr310:2.13.1'

        compileOnly "org.projectlombok:lombok:${lombokVersion}"
        annotationProcessor "org.projectlombok:lombok:${lombokVersion}"

        implementation "org.mapstruct:mapstruct:${mapstructVersion}"
        compileOnly "org.mapstruct:mapstruct-processor:${mapstructVersion}"
        annotationProcessor "org.mapstruct:mapstruct-processor:${mapstructVersion}"
        testAnnotationProcessor "org.mapstruct:mapstruct-processor:${mapstructVersion}"

        implementation 'org.springframework.retry:spring-retry:1.3.1'
        implementation 'org.springframework:spring-aspects:5.3.15'
        implementation 'org.springframework.boot:spring-boot-starter-validation'
        implementation 'org.springframework.boot:spring-boot-starter-test'
    }

    compileJava {
        sourceCompatibility = 11
        targetCompatibility = 11
    }

    test {
        useJUnitPlatform()
        testLogging {
            showStandardStreams = true
        }
    }

    tasks.withType(Test) {
        useJUnitPlatform()
    }

    sourceSets {
        integrationTest {
            compileClasspath += sourceSets.main.output
            runtimeClasspath += sourceSets.main.output
        }
    }

    configurations {
        integrationTestImplementation.extendsFrom implementation
        integrationTestRuntimeOnly.extendsFrom runtimeOnly
    }

    task integrationTest(type: Test) {
        useJUnitPlatform()
        group = LifecycleBasePlugin.VERIFICATION_GROUP
        description = 'Runs the integration tests.'

        maxHeapSize = '1024m'

        testClassesDirs = sourceSets.integrationTest.output.classesDirs
        classpath = sourceSets.integrationTest.runtimeClasspath

        binResultsDir = file("$buildDir/integration-test-results/binary/integTest")

        mustRunAfter tasks.test
    }

}